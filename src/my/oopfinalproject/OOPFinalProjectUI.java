/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.oopfinalproject;
import java.sql.*;
import java.util.Arrays;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.BoxLayout;
import java.lang.StringBuilder;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author chenshengyi
 */
public class OOPFinalProjectUI extends javax.swing.JFrame {

    /**
     * Creates new form ConcactEditorUI
     */
    public OOPFinalProjectUI() {
        initComponents();
        createComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sellerFrame = new javax.swing.JFrame();
        sellingItemsPane = new javax.swing.JScrollPane();
        addNewItemButton = new javax.swing.JButton();
        toBuyer = new javax.swing.JButton();
        buyerFrame = new javax.swing.JFrame();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        searchTag = new javax.swing.JComboBox<>();
        buyerScrollPane = new javax.swing.JScrollPane();
        toSeller = new javax.swing.JButton();
        allItem = new javax.swing.JButton();
        infoFrame = new javax.swing.JFrame();
        previousPageButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        discrLabel = new javax.swing.JLabel();
        pricingLabel = new javax.swing.JLabel();
        tagsLabel = new javax.swing.JLabel();
        conditionLabel = new javax.swing.JLabel();
        paymentLabel = new javax.swing.JLabel();
        picLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        discriptionArea = new javax.swing.JTextArea();
        fixedPBtn = new javax.swing.JToggleButton();
        biddingBtn = new javax.swing.JToggleButton();
        priceLabel = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        tagSeller = new javax.swing.JComboBox<>();
        condition = new javax.swing.JComboBox<>();
        paymentBox = new javax.swing.JComboBox<>();
        fileNameLabel = new javax.swing.JLabel();
        uploadButton = new javax.swing.JButton();
        confirm = new javax.swing.JButton();
        deleteItemBtn = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        goodFrame = new javax.swing.JFrame();
        previousPage = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        discriptionL = new javax.swing.JLabel();
        modeL = new javax.swing.JLabel();
        tagL = new javax.swing.JLabel();
        nameTitle = new javax.swing.JLabel();
        conditionL = new javax.swing.JLabel();
        discriptionTitle = new javax.swing.JLabel();
        paymentL = new javax.swing.JLabel();
        modeTitle = new javax.swing.JLabel();
        pictureL = new javax.swing.JLabel();
        tagsTitle = new javax.swing.JLabel();
        conditionTitle = new javax.swing.JLabel();
        paymentTitle = new javax.swing.JLabel();
        pictureTitle = new javax.swing.JLabel();
        nameL = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        buyBtn = new javax.swing.JButton();
        bidPrice = new javax.swing.JTextField();
        priceL = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        loginLabel = new javax.swing.JLabel();
        userIDLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        signupButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();

        addNewItemButton.setText("新增");
        addNewItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewItemButtonActionPerformed(evt);
            }
        });

        toBuyer.setText("Buyer");
        toBuyer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toBuyerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sellerFrameLayout = new javax.swing.GroupLayout(sellerFrame.getContentPane());
        sellerFrame.getContentPane().setLayout(sellerFrameLayout);
        sellerFrameLayout.setHorizontalGroup(
            sellerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellerFrameLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(sellerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(sellerFrameLayout.createSequentialGroup()
                        .addComponent(addNewItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toBuyer))
                    .addComponent(sellingItemsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        sellerFrameLayout.setVerticalGroup(
            sellerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellerFrameLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(sellingItemsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sellerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addNewItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(toBuyer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        buyerFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTagActionPerformed(evt);
            }
        });

        buyerScrollPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        buyerScrollPane.setViewportView(null);
        buyerScrollPane.setWheelScrollingEnabled(false);

        toSeller.setText("Seller");
        toSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toSellerActionPerformed(evt);
            }
        });

        allItem.setText("All Items");
        allItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buyerFrameLayout = new javax.swing.GroupLayout(buyerFrame.getContentPane());
        buyerFrame.getContentPane().setLayout(buyerFrameLayout);
        buyerFrameLayout.setHorizontalGroup(
            buyerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyerFrameLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(buyerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyerFrameLayout.createSequentialGroup()
                        .addGroup(buyerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buyerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(buyerFrameLayout.createSequentialGroup()
                        .addGroup(buyerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(buyerFrameLayout.createSequentialGroup()
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton))
                            .addComponent(allItem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toSeller)))
                .addGap(40, 40, 40))
        );
        buyerFrameLayout.setVerticalGroup(
            buyerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyerFrameLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(buyerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(toSeller))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buyerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buyerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        infoFrame.setMinimumSize(new java.awt.Dimension(0, 720));

        previousPageButton.setText("上一頁");
        previousPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousPageButtonActionPerformed(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        nameLabel.setText("商品名稱");

        discrLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        discrLabel.setText("描述");

        pricingLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        pricingLabel.setText("販售方式");

        tagsLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        tagsLabel.setText("Tags");

        conditionLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        conditionLabel.setText("商品狀態");

        paymentLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        paymentLabel.setText("預期支付方式");

        picLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        picLabel.setText("圖片");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        discriptionArea.setColumns(20);
        discriptionArea.setLineWrap(true);
        discriptionArea.setRows(5);
        discriptionArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(discriptionArea);

        buttonGroup1.add(fixedPBtn);
        fixedPBtn.setText("定價");
        fixedPBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixedPBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(biddingBtn);
        biddingBtn.setSelected(true);
        biddingBtn.setText("競標");
        biddingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biddingBtnActionPerformed(evt);
            }
        });

        priceField.setMinimumSize(new java.awt.Dimension(64, 30));
        priceField.setPreferredSize(new java.awt.Dimension(64, 30));

        tagSeller.setEditable(true);
        tagSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagSellerActionPerformed(evt);
            }
        });

        condition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conditionActionPerformed(evt);
            }
        });

        paymentBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "現金面交", "轉帳後面交", "寄送貨到付款", "轉帳後寄送" }));
        paymentBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentBoxActionPerformed(evt);
            }
        });

        fileNameLabel.setText("No File");

        uploadButton.setText("上傳圖片");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        confirm.setText("確認");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        deleteItemBtn.setText("刪除");
        deleteItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoFrameLayout = new javax.swing.GroupLayout(infoFrame.getContentPane());
        infoFrame.getContentPane().setLayout(infoFrameLayout);
        infoFrameLayout.setHorizontalGroup(
            infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoFrameLayout.createSequentialGroup()
                .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoFrameLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(picLabel)
                            .addComponent(paymentLabel)
                            .addComponent(conditionLabel)
                            .addComponent(pricingLabel)
                            .addComponent(tagsLabel))
                        .addGap(37, 37, 37)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uploadButton)
                            .addGroup(infoFrameLayout.createSequentialGroup()
                                .addComponent(fixedPBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(biddingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tagSeller, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(condition, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(paymentBox, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(123, 123, 123)
                        .addComponent(priceLabel))
                    .addGroup(infoFrameLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(previousPageButton))
                    .addGroup(infoFrameLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(discrLabel)
                            .addComponent(nameLabel))
                        .addGap(39, 39, 39)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(infoFrameLayout.createSequentialGroup()
                .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoFrameLayout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoFrameLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fileNameLabel)
                            .addGroup(infoFrameLayout.createSequentialGroup()
                                .addComponent(confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(deleteItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        infoFrameLayout.setVerticalGroup(
            infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoFrameLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(previousPageButton)
                .addGap(18, 18, 18)
                .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(priceLabel)
                        .addGap(371, 371, 371))
                    .addGroup(infoFrameLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(discrLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fixedPBtn)
                            .addComponent(biddingBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pricingLabel))
                        .addGap(27, 27, 27)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tagSeller, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tagsLabel))
                        .addGap(19, 19, 19)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(condition, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(conditionLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paymentBox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paymentLabel))
                        .addGap(18, 18, 18)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(picLabel)
                            .addComponent(fileNameLabel)
                            .addComponent(uploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(infoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(116, 116, 116))))
        );

        fileChooser.setDialogTitle("");

        goodFrame.setMinimumSize(new java.awt.Dimension(400, 750));

        previousPage.setText("上一頁");
        previousPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousPageActionPerformed(evt);
            }
        });

        infoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        infoPanel.setPreferredSize(new java.awt.Dimension(400, 465));
        infoPanel.setSize(new java.awt.Dimension(350, 500));

        discriptionL.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        discriptionL.setText("discription");
        discriptionL.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        modeL.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        modeL.setText("mode");

        tagL.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        tagL.setText("tag");

        nameTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        nameTitle.setText("商品名稱");

        conditionL.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        conditionL.setText("condition");

        discriptionTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        discriptionTitle.setText("描述");

        paymentL.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        paymentL.setText("payment");

        modeTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        modeTitle.setText("販售方式");

        pictureL.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        pictureL.setText("picture");

        tagsTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        tagsTitle.setText("Tags");

        conditionTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        conditionTitle.setText("商品狀態");

        paymentTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        paymentTitle.setText("預期支付方式");

        pictureTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        pictureTitle.setText("圖片");

        nameL.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        nameL.setText("name");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameTitle)
                            .addComponent(discriptionTitle)
                            .addComponent(modeTitle)
                            .addComponent(tagsTitle)
                            .addComponent(conditionTitle)))
                    .addComponent(paymentTitle, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pictureTitle, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(85, 85, 85)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modeL)
                    .addComponent(tagL)
                    .addComponent(conditionL)
                    .addComponent(paymentL)
                    .addComponent(pictureL)
                    .addComponent(nameL)
                    .addComponent(discriptionL, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTitle)
                    .addComponent(nameL))
                .addGap(36, 36, 36)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(discriptionTitle)
                        .addGap(58, 58, 58))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(discriptionL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modeTitle)
                    .addComponent(modeL))
                .addGap(46, 46, 46)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagsTitle)
                    .addComponent(tagL))
                .addGap(55, 55, 55)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(conditionTitle)
                    .addComponent(conditionL))
                .addGap(46, 46, 46)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentTitle)
                    .addComponent(paymentL))
                .addGap(45, 45, 45)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pictureL)
                    .addComponent(pictureTitle))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buyBtn.setText("確定");
        buyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBtnActionPerformed(evt);
            }
        });

        bidPrice.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        bidPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bidPrice.setText("0");
        bidPrice.setPreferredSize(new java.awt.Dimension(58, 18));
        bidPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bidPriceActionPerformed(evt);
            }
        });

        priceL.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        priceL.setText("現在價錢：1000");

        label.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        label.setText("下標");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(priceL, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bidPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bidPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceL, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout goodFrameLayout = new javax.swing.GroupLayout(goodFrame.getContentPane());
        goodFrame.getContentPane().setLayout(goodFrameLayout);
        goodFrameLayout.setHorizontalGroup(
            goodFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(goodFrameLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(goodFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(goodFrameLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(previousPage))
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, Short.MAX_VALUE))
        );
        goodFrameLayout.setVerticalGroup(
            goodFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(goodFrameLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(previousPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loginLabel.setFont(new java.awt.Font("KufiStandardGK", 0, 24)); // NOI18N
        loginLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loginLabel.setText("Login");
        loginLabel.setDoubleBuffered(true);

        userIDLabel.setFont(new java.awt.Font("Kohinoor Gujarati", 0, 18)); // NOI18N
        userIDLabel.setText("User ID");

        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        passwordLabel.setFont(new java.awt.Font("Kohinoor Gujarati", 0, 18)); // NOI18N
        passwordLabel.setText("Password");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        signupButton.setText("註冊");
        signupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });

        loginButton.setText("登入");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordLabel)
                            .addComponent(userIDLabel))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(signupButton)
                        .addGap(79, 79, 79)
                        .addComponent(loginButton)))
                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userIDLabel)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signupButton)
                    .addComponent(loginButton))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createComboBox(){
        // 設定買家賣家所需要用到的商品tag標籤
        searchTag.removeAllItems();
        tagSeller.removeAllItems();
        tagSeller.addItem("#");
        searchTag.addItem("#");
        for (String tag : getTags()){       
            searchTag.addItem(tag);
            tagSeller.addItem(tag);
        }
        
        // 設定賣家是否售出的ComboBox
        condition.removeAllItems();
        condition.addItem("已賣出");
        condition.addItem("未賣出");
    }
    
    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_idFieldActionPerformed

    private void signupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupButtonActionPerformed
        // TODO add your handling code here:
        // 註冊帳號
        String name = idField.getText();
        if (name.length() > 20){
            JOptionPane.showMessageDialog(null, "帳號限20字內", "帳號長度超過限制", JOptionPane.WARNING_MESSAGE);
            return;
        }
        StringBuilder pTransfer = new StringBuilder();
        pTransfer.append(passwordField.getPassword());
        String password = pTransfer.toString();
        if (password.equals("")){
            JOptionPane.showMessageDialog(null, "請輸入密碼", "密碼欄空白", JOptionPane.ERROR_MESSAGE);
            return;
        }else if(password.length() > 20){
            JOptionPane.showMessageDialog(null, "密碼限20字內", "密碼長度超過限制", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // 確認資料庫是否有重複的使用者名稱
        try{
            Statement statement = conn.createStatement();
            String query = String.format("SELECT * FROM `Acount` WHERE username = '%s'",name);
            statement.execute(query);
            ResultSet result = statement.getResultSet();
            if(result.next()){
                JOptionPane.showMessageDialog(null, "使用者名稱重複 請更改名稱", "使用者名稱重複", JOptionPane.WARNING_MESSAGE);
            }else{ // 確認使用者未重複新增使用者
                query = String.format("INSERT INTO `Acount` (username,password) VALUES ('%s','%s');", name, password);
                statement.execute(query);
                JOptionPane.showMessageDialog(null, "註冊成功", "註冊成功", JOptionPane.INFORMATION_MESSAGE);
            }
            result.close();
        }catch(SQLException e){
             e.printStackTrace();
        }
    }//GEN-LAST:event_signupButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO
        // 使用者登入
        String username = idField.getText();
        StringBuilder pTransfer = new StringBuilder();
        pTransfer.append(passwordField.getPassword());
        String password = pTransfer.toString();
        try{
            Statement statement = conn.createStatement();
            String query = String.format("SELECT * FROM `Acount` WHERE username = '%s'",username);
            boolean sucess = statement.execute(query);
            
            // 確認登入資料
            ResultSet result = statement.getResultSet();
            if (result.next()){
                if(sucess){

                    String passwordData = result.getString("password");
                    if(passwordData.equals(password))
                        sucess = true;
                    else{
                        JOptionPane.showMessageDialog(null, "密碼錯誤", "密碼錯誤", JOptionPane.ERROR_MESSAGE);
                        sucess = false;
                    }

                    result.close();
                }
                
                if(sucess){
                    user = username;
                    searchTag.setSelectedIndex(0);
                    createBuyerFrame();
                    this.setVisible(false);
                    buyerFrame.setSize(500,630);
                    buyerFrame.pack();
                    buyerFrame.setVisible(true);
                    allItem.setVisible(false);
                }
                
            }else{
                JOptionPane.showMessageDialog(null, "找不到使用者 如未註冊請先點擊註冊按鈕", "找不到使用者", JOptionPane.ERROR_MESSAGE);
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void addNewItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewItemButtonActionPerformed
        // TODO add your handling code here:
        // 賣家介面的新增按鈕，按下後開啟商品資訊頁面（GoodsFrame)，讓賣家上架商品
        createInfoFrame();
        sellerFrame.setVisible(false);
        infoFrame.setSize(500,630);
        infoFrame.pack();
        infoFrame.setVisible(true);
        newItem = true;
        deleteItemBtn.setVisible(!newItem);
        condition.setEnabled(!newItem);
    }//GEN-LAST:event_addNewItemButtonActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTagActionPerformed
        // TODO add your handling code here:
        // 買家介面搜尋區域下的tag篩選按鈕，選取後顯示帶有tag的商品
        String search = (String)searchTag.getSelectedItem();
        if (searchTag.getSelectedIndex() == 0){
            createBuyerFrame();
            return;
        }
        try{
            Statement statement = conn.createStatement();
            String query = String.format("SELECT g_name, price, picture, s_name FROM `Goods` WHERE tag = '%s' AND g_condition = '未賣出'",search);
            boolean sucess = statement.execute(query);
            ResultSet result = statement.getResultSet();
            
            if(sucess){
                JPanel wrapper = new JPanel();
                wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.Y_AXIS));
                while(result.next()){
                    String name = result.getString("g_name");
                    double p = Double.parseDouble(result.getString("price"));
                    Blob img = result.getBlob("picture");
                    String seller = result.getString("s_name");
                    JPanel goodsPanel = createGoodsPanel(img,name,p,seller);
                    //buyerScrollPane.add(goodsPanel);
                    wrapper.add(goodsPanel);
                }
                buyerScrollPane.add(wrapper);
                buyerScrollPane.setViewportView(wrapper);
                buyerScrollPane.revalidate(); // 刷新ScrollPane
                buyerScrollPane.repaint(); // 重繪ScrollPane
                allItem.setVisible(true);
            }   
        }catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchTagActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_nameFieldActionPerformed

    private void fixedPBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixedPBtnActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_fixedPBtnActionPerformed

    private void conditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conditionActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_conditionActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        try {
            // TODO add your handling code here:
            // 上傳照片
            addPicture(uploadButton);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void biddingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biddingBtnActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_biddingBtnActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        // 買家按下搜尋按鈕，尋找商品名稱包含所輸入字串的商品
        String search = searchField.getText();
        if (search.equals("")){// 確認搜尋欄位有輸入
            JOptionPane.showMessageDialog(null, "請輸入商品名稱", "搜尋欄空白", JOptionPane.WARNING_MESSAGE);
        }else{
            try{// 搜尋商品
                Statement statement = conn.createStatement();
                String query = "SELECT g_name, s_name FROM `Goods` WHERE g_condition = '未賣出'";
                boolean sucess = statement.execute(query);
                ResultSet result = statement.getResultSet();
                ArrayList<String> goods = new ArrayList<String>();
                ArrayList<String> gSellers = new ArrayList<String>();
                while(result.next()){
                    goods.add(result.getString("g_name"));
                    gSellers.add(result.getString("s_name"));
                }
                // 將商品顯示於BuyerFrame
                JPanel wrapper = new JPanel();
                wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.Y_AXIS));
                for (int i = 0; i < goods.size(); i++){
                    String good = goods.get(i);
                    String gSeller = gSellers.get(i);
                    if (good.contains(search)){
                        query = String.format("SELECT g_name, price, picture, s_name FROM `Goods` WHERE g_condition = '未賣出' AND g_name = '%s' AND s_name = '%s'", good, gSeller);
                        statement.execute(query);
                        result = statement.getResultSet();
                        while(result.next()){
                            String name = result.getString("g_name");
                            double p = Double.parseDouble(result.getString("price"));
                            Blob img = result.getBlob("picture");
                            String seller = result.getString("s_name");
                            JPanel goodsPanel = createGoodsPanel(img,name,p,seller);
                            //buyerScrollPane.add(goodsPanel);
                            wrapper.add(goodsPanel);
                            sucess = false;
                        }
                    }
                }
                 
                if (!sucess){
                    buyerScrollPane.add(wrapper);
                    buyerScrollPane.setViewportView(wrapper);
                    buyerScrollPane.revalidate(); // 刷新ScrollPane
                    buyerScrollPane.repaint(); // 重繪ScrollPane
                    searchField.setText("");
                    allItem.setVisible(true);
                }else
                    JOptionPane.showMessageDialog(null, "查無此商品", "查無此商品", JOptionPane.INFORMATION_MESSAGE);
                
            }catch(SQLException e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void previousPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousPageButtonActionPerformed
        // TODO add your handling code here:
        // 回到sellerFrame
        createsellerFrame();
        infoFrame.setVisible(false);
        sellerFrame.setSize(500,630);
        sellerFrame.pack();
        sellerFrame.setVisible(true);
        createComboBox();
        pic = null;
    }//GEN-LAST:event_previousPageButtonActionPerformed

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        // TODO add your handling code here:
        // 將所有資訊回傳資料庫
        String name = "";
        if (nameField.getText().equals("")){
            JOptionPane.showMessageDialog(null, "請輸入商品名稱", "商品名稱欄空白", JOptionPane.WARNING_MESSAGE);
            return;
        }else
            name = nameField.getText();
        
        String discription = discriptionArea.getText();
        try{
            int price = Integer.parseInt(priceField.getText());
            if (price > 0){
                String mode = "";
                if(fixedPBtn.isSelected()){
                    mode = "定價";
                }else if(biddingBtn.isSelected()){
                    mode = "競標";                    
                }else{
                    JOptionPane.showMessageDialog(null, "請選擇定價或競標", "未選擇定價方法", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String goodtag = (String)tagSeller.getSelectedItem();
                String g_condition = (String)condition.getSelectedItem();
                String payment = (String)paymentBox.getSelectedItem();
                if (pic == null){
                    JOptionPane.showMessageDialog(null, "請選擇圖片", "未選擇圖片", JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                //TODO
                // 如果是新的商品，先確認商品名稱是否重複後再新增
                if (newItem){
                    try{
                        Statement statement = conn.createStatement();
                        String query = String.format("SELECT * FROM `Goods` WHERE g_name = '%s' AND s_name = '%s'", name, user);
                        statement.execute(query);
                        ResultSet result = statement.getResultSet();
                        if(result.next()){
                            JOptionPane.showMessageDialog(null, "商品名稱重複", "商品名稱重複", JOptionPane.ERROR_MESSAGE);
                        }else{
                            query = String.format("INSERT INTO `Goods`(`g_name`, `price`, `intro`, `mode`, `tag`, `g_condition`, `payment`, `picture`, `s_name`) VALUES ('%s','%d','%s','%s','%s','%s','%s','%s','%s')", name, price,discription, mode, goodtag, g_condition, payment,"?", user);
                            PreparedStatement ppst = conn.prepareCall(query);
                            ppst.setBlob(1, pic);
                            ppst.execute();
                            ppst.close();
                            JOptionPane.showMessageDialog(null, "已新增新商品", "新增商品成功", JOptionPane.INFORMATION_MESSAGE);
                            newItem = false;
                            deleteItemBtn.setVisible(!newItem);
                            condition.setEnabled(!newItem);
                        }
                    }catch(SQLException e){
                        e.printStackTrace();
                    }
                }else{// 如果是舊商品進來更改商品資訊，確認商品名稱是否重複後上傳
                    try{
                        if (!goodName.equals(name)){
                            Statement statement = conn.createStatement();
                            String query = String.format("SELECT * FROM `Goods` WHERE g_name = '%s' AND s_name = '%s'", name, user);
                            statement.execute(query);
                            ResultSet result = statement.getResultSet();
                            
                            if(result.next()){
                                JOptionPane.showMessageDialog(null, "商品名稱重複", "商品名稱重複", JOptionPane.WARNING_MESSAGE);
                                return;
                            }
                        }
                        Statement statement = conn.createStatement();
                        String query = String.format("UPDATE `Goods` SET `g_name`='%s',`price`='%d',`intro`='%s',`mode`='%s',`tag`='%s',`g_condition`='%s',`payment`='%s',`picture`=? WHERE g_name = '%s' AND s_name = '%s';", name, price,discription, mode, goodtag, g_condition, payment, goodName,user);
                        PreparedStatement ppst = conn.prepareCall(query);
                        ppst.setBlob(1, pic);
                        ppst.execute();
                        ppst.close();
                        JOptionPane.showMessageDialog(null, "更改完成", "更改完成", JOptionPane.INFORMATION_MESSAGE);
                        goodName = name;
                    }catch(SQLException e){
                        e.printStackTrace();
                    }
                }
            }else if (priceField.getText() == null){
                JOptionPane.showMessageDialog(null, "價格設定錯誤", "價格設定錯誤", JOptionPane.ERROR_MESSAGE);
            }else
                JOptionPane.showMessageDialog(null, "價格設定錯誤", "價格設定錯誤", JOptionPane.ERROR_MESSAGE);
            
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "價格設定錯誤", "價格設定錯誤", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_confirmActionPerformed

    private void tagSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagSellerActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_tagSellerActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void toSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toSellerActionPerformed
        // TODO add your handling code here:
        // 從買家到賣家
        createsellerFrame();
        buyerFrame.setVisible(false);
        sellerFrame.setSize(500,630);
        sellerFrame.pack();
        sellerFrame.setVisible(true);
    }//GEN-LAST:event_toSellerActionPerformed

    private void paymentBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentBoxActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_paymentBoxActionPerformed

    private void toBuyerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toBuyerActionPerformed
        // TODO add your handling code here:
        // 從賣家到買家
        createBuyerFrame();
        sellerFrame.setVisible(false);
        buyerFrame.setSize(500,630);
        buyerFrame.pack();
        buyerFrame.setVisible(true);
    }//GEN-LAST:event_toBuyerActionPerformed

    private void previousPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousPageActionPerformed
        // TODO add your handling code here:
        // 從goodFrame回到買家頁面
        createBuyerFrame();
        searchTag.setSelectedIndex(0);
        goodFrame.setVisible(false);
        buyerFrame.setSize(500,630);
        buyerFrame.pack();
        buyerFrame.setVisible(true);        
    }//GEN-LAST:event_previousPageActionPerformed

    private void deleteItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemBtnActionPerformed
        // 刪除商品
        int delete = JOptionPane.showConfirmDialog(null,"確定要刪除嗎","確定刪除",JOptionPane.YES_NO_OPTION);
        if (delete == JOptionPane.YES_OPTION){
            try{
                Statement statement = conn.createStatement();
                String query = String.format("DELETE FROM `Goods` WHERE g_name = '%s' AND s_name = '%s'",goodName ,user);
                statement.execute(query);
                    JOptionPane.showMessageDialog(null, "已刪除", "已刪除", JOptionPane.INFORMATION_MESSAGE);

                // turn back to sellerFrame
                createsellerFrame();
                infoFrame.setVisible(false);
                sellerFrame.setSize(500,630);
                sellerFrame.setVisible(true);
                
            }catch(SQLException e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_deleteItemBtnActionPerformed

    private void allItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allItemActionPerformed
        // TODO add your handling code here:
        // 買家搜尋過商品以後，恢復顯示所有商品
        allItem.setVisible(false);
        createBuyerFrame();
    }//GEN-LAST:event_allItemActionPerformed

    private void bidPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bidPriceActionPerformed
        // TODO add your handling code here:
        // 無需加入action
    }//GEN-LAST:event_bidPriceActionPerformed

    private void buyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBtnActionPerformed
        // TODO add your handling code here:
        // 購買或下標商品按鈕
        if(modeL.getText().equals("競標")){// 如果商品為競標的商品
            try{
                int buyingPrice = Integer.parseInt(bidPrice.getText());
                if (buyingPrice > price){
                    try{
                        Statement statement = conn.createStatement();
                        String query = String.format("UPDATE `Goods` SET `price` = '%d' WHERE `g_name` = '%s' AND `s_name` = '%s'",buyingPrice,goodName,sell);
                        statement.execute(query);
                        JOptionPane.showMessageDialog(null,"下標成功","下標成功",JOptionPane.INFORMATION_MESSAGE);
                        createGoodFrame(goodName,sell);
                    }catch(SQLException e){
                        e.printStackTrace();
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "下標價錢低於目前價錢", "下標價錢低於目前價錢", JOptionPane.WARNING_MESSAGE);
                }
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "請輸入價錢", "請輸入價錢", JOptionPane.WARNING_MESSAGE);
            }
        }else if (modeL.getText().equals("定價")){// 如果商品為定價的商品
            int buy = JOptionPane.showConfirmDialog(null,"確定要下單嗎","確定下單",JOptionPane.YES_NO_OPTION);
            if (buy == JOptionPane.YES_OPTION){
                try{
                    Statement statement = conn.createStatement();
                    String query = String.format("UPDATE `Goods` SET `g_condition` = '%s' WHERE `g_name` = '%s' AND `s_name` = '%s'","已賣出",goodName,sell);
                    statement.execute(query);
                    JOptionPane.showMessageDialog(null,"下標成功","下標成功",JOptionPane.INFORMATION_MESSAGE);
                    createGoodFrame(goodName,sell);
                    priceL.setText("已下單成功");
                    
                    buyBtn.setVisible(false);
                }catch(SQLException e){
                        e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_buyBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OOPFinalProjectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OOPFinalProjectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OOPFinalProjectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OOPFinalProjectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        connectDB();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OOPFinalProjectUI().setVisible(true);
            }
        });

    }
     
    private static void connectDB(){
        String server = "jdbc:mysql://140.119.19.73:3315/";
        String database = "110306021"; // change to your own database
        String url = server + database + "?useSSL=false";
        String username = "110306021"; // change to your own user name
        String password = "pyptz"; // change to your own password

        try {
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("DB Connected");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    
    /**
     * 
     * @param tagData the tag data gotten from the data base
     * @return a String array of the tags
     */
    
    private ArrayList<String> getTags(){// 取得資料庫內tag資料
        ArrayList<String> tags = new ArrayList<String>();
        try{
            Statement statement = conn.createStatement();
            String query = "SELECT tag FROM `Goods`";
            statement.execute(query);
            ResultSet result = statement.getResultSet();
            
            while(result.next()){
                Boolean test = true;
                String tag = result.getString("tag");
                for (int i = 0; i < tags.size(); i++){
                    if (tag.equals(tags.get(i))){
                        test = false;
                    }
                }
                if(test){
                    tags.add(tag);
                }
            }
            return tags;
        }catch(SQLException e){
            e.printStackTrace();
            return null;
        }   
    }

    
    
   /**
    * 
    * @param p the repository of the photo
    * @param name the name of the product
    * @param price the price of the product
    * @return the panel of the goods
    */
    private JPanel createGoodsPanel(Blob img, String name, double price, String seller) throws SQLException{// 做出買家商品瀏覽頁面的資訊框
      
        JLabel nLabel = new JLabel(name);
        nLabel.setFont(new java.awt.Font("Dialog", 1, 15));
        JLabel pLabel = new JLabel(String.format("%d",(int)price));
        pLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        JButton detailButton = new JButton("Detail");
        detailButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){
                //TODO : create the detail Frame of the product
                goodName = name;
                sell = seller;
                createGoodFrame(goodName, sell);
                buyerFrame.setVisible(false);
                goodFrame.setPreferredSize(new Dimension(600,630));
                infoPanel.setPreferredSize(new Dimension(440, 520));
                goodFrame.pack();
                goodFrame.setVisible(true);
            }
        });
        
        Blob imgBlob = img;
	ImageIcon imageIcon = new ImageIcon(imgBlob.getBytes(1L, (int)imgBlob.length()));
	imageIcon.setImage(imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));
        Image image = imageIcon.getImage();
        image = image.getScaledInstance(100, 100, Image.SCALE_DEFAULT);
        imageIcon.setImage(image);
        JLabel picture = new JLabel();
        picture.setIcon(imageIcon);
        picture.getIcon();
        picture.setPreferredSize(new Dimension(100,100));
        picture.setText("");
        
        JPanel eastPanel = new JPanel(new GridLayout(0,1));
        eastPanel.setPreferredSize(new Dimension(70,100));
        eastPanel.add(pLabel);
        eastPanel.add(detailButton);
        
        JPanel panel = new JPanel(new BorderLayout());
        panel.setPreferredSize(new Dimension(370,100));
        panel.add(picture, BorderLayout.WEST);
        panel.add(nLabel, BorderLayout.CENTER);
        panel.add(eastPanel, BorderLayout.EAST);
        
        // add border to the panel
        Border border = BorderFactory.createLineBorder(Color.black);
        panel.setBorder(border);
        panel.setSize(450,100);
        return panel;    
    }
    
    private JPanel createGoodsPanel(Blob img, double price, String name, String mode, String condition) throws SQLException{// 做出賣家商品瀏覽頁面的資訊框
      
        JLabel nLabel = new JLabel(name);
        nLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        JLabel pLabel = new JLabel(String.format("%d",(int)price));
        pLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        JLabel modeLabel = new JLabel(mode);
        modeLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        JLabel cLabel = new JLabel(condition);
        if (condition.equals("已賣出")){
            cLabel.setForeground(Color.RED);
        }
        cLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        JButton detailButton = new JButton("Detail");
        detailButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){
                //TODO : create the detail Frame of the product
                goodName = name;
                createInfoFrame(name);
                sellerFrame.setVisible(false);
                infoFrame.setSize(500,630);
                infoFrame.pack();
                infoFrame.setVisible(true);
                newItem = false;
                deleteItemBtn.setVisible(!newItem);
            }
        });
        
        Blob imgBlob = img;
	ImageIcon imageIcon = new ImageIcon(imgBlob.getBytes(1L, (int)imgBlob.length()));
	imageIcon.setImage(imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));
        Image image = imageIcon.getImage();
        image = image.getScaledInstance(100, 100, Image.SCALE_DEFAULT);
        imageIcon.setImage(image);
        JLabel picture = new JLabel();
        picture.setIcon(imageIcon);
        picture.getIcon();
        picture.setPreferredSize(new Dimension(100,100));
        picture.setText("");
        
        JPanel eastPanel = new JPanel(new GridLayout(0,1));
        eastPanel.setPreferredSize(new Dimension(100,150));
        eastPanel.add(cLabel);
        eastPanel.add(modeLabel);
        eastPanel.add(detailButton);
        
        JPanel midPanel = new JPanel(new GridLayout(0,1));
        midPanel.setPreferredSize(new Dimension(250,150));
        midPanel.add(nLabel);
        midPanel.add(pLabel);
        
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(picture, BorderLayout.WEST);
        panel.add(midPanel, BorderLayout.CENTER);
        panel.add(eastPanel, BorderLayout.EAST);
        
        Border border = BorderFactory.createLineBorder(Color.BLACK);
        panel.setBorder(border);
        panel.setPreferredSize(new Dimension(350,150));
        return panel;    
    }
    
    private void createInfoFrame(String name){// 按下Detail按鈕進入商品詳細資訊
        try{
            Statement statement = conn.createStatement();
            String query = String.format("SELECT * FROM `Goods` WHERE s_name = '%s' AND g_name = '%s'",user,name);
            boolean sucess = statement.execute(query);
            ResultSet result = statement.getResultSet();
            
            if(sucess){
                while(result.next()){
                    nameField.setText(name);
                    discriptionArea.setText(result.getString("intro"));
                    String mode = result.getString("mode");
                    if(mode.equals("定價")){
                        fixedPBtn.setSelected(true);
                        biddingBtn.setSelected(false);
                    }else{
                        fixedPBtn.setSelected(false);
                        biddingBtn.setSelected(true);
                    }
                    priceField.setText(result.getString("price"));
                    tagSeller.setSelectedItem(result.getString("tag"));
                    condition.setSelectedItem(result.getString("g_condition"));
                    paymentBox.setSelectedItem(result.getString("payment"));
                    Blob imgBlob = result.getBlob("picture");
                    ImageIcon imageIcon = new ImageIcon(imgBlob.getBytes(1L, (int)imgBlob.length()));
                    imageIcon.setImage(imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));
                    Image image = imageIcon.getImage();
                    image = image.getScaledInstance(100, 100, Image.SCALE_DEFAULT);
                    imageIcon.setImage(image);
                    fileNameLabel.setIcon(imageIcon);
                    fileNameLabel.getIcon();
                    fileNameLabel.setPreferredSize(new Dimension(100,100));
                    fileNameLabel.setText("");
                    pic = imgBlob;
                }
                result.close();
            }
            
        }catch(SQLException e){
            e.printStackTrace();
        } 
    }
    
    private void createGoodFrame(String name, String seller){
        try{
            Statement statement = conn.createStatement();
            String query = String.format("SELECT * FROM `Goods` WHERE g_name = '%s' AND s_name = '%s'",name,seller);
            boolean sucess = statement.execute(query);
            ResultSet result = statement.getResultSet();
            
            if(sucess){
                while(result.next()){
                    nameL.setText(result.getString("g_name"));
                    String discription = "<html>" + result.getString("intro") + "</html>";
                    discriptionL.setText(discription);
                    modeL.setText(result.getString("mode"));
                    tagL.setText(result.getString("tag"));
                    conditionL.setText(result.getString("g_condition"));
                    paymentL.setText(result.getString("payment"));
                    ImageIcon imageIcon = new ImageIcon(result.getString("picture"));
                    imageIcon.setImage(imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));
                    Image image = imageIcon.getImage();
                    image = image.getScaledInstance(100, 100, Image.SCALE_DEFAULT);
                    imageIcon.setImage(image);
                    pictureL.setIcon(imageIcon);
                    pictureL.getIcon();
                    pictureL.setPreferredSize(new Dimension(100,100));
                    pictureL.setText("");
                    if (result.getString("mode").equals("競標")){
                        buyBtn.setVisible(true);
                        buyBtn.setPreferredSize(new Dimension(72,23));
                        label.setVisible(true);
                        bidPrice.setVisible(true);
                        bidPrice.setText(result.getString("price"));
                        price = Integer.parseInt(result.getString("price"));
                        priceL.setText("現在價錢：" + price);
                        buyBtn.setText("確定");
                    }else if(result.getString("mode").equals("定價")){
                        buyBtn.setVisible(true);
                        label.setVisible(false);
                        bidPrice.setVisible(false);
                        price = Integer.parseInt(result.getString("price"));
                        priceL.setText("價錢：" + price);
                        buyBtn.setText("下單");
                        buyBtn.setPreferredSize(new Dimension(172,23));
                    }
                }
                result.close();
            }
            
        }catch(SQLException e){
            e.printStackTrace();
        } 
    }
    
    private void createInfoFrame(){// 按下新增按鈕建立新的infoFrame
        goodName = "";
        nameField.setText("商品名稱");
        discriptionArea.setText("產品新舊狀況(九成新)...");
        priceField.setText("0");
        priceField.setPreferredSize(new Dimension(64,23));
        condition.setSelectedItem("未賣出");
        fileNameLabel.setPreferredSize(new Dimension(100,100));
        fileNameLabel.setIcon(null);
        fileNameLabel.setText("No File");
    }
    
    private void createsellerFrame(){
        try{
            Statement statement = conn.createStatement();
            String query = String.format("SELECT * FROM `Goods` WHERE s_name = '%s' AND g_condition = '未賣出'",user);
            boolean sucess = statement.execute(query);
            ResultSet result = statement.getResultSet();
            JPanel wrapper = new JPanel();
            
            if(sucess){
                wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.Y_AXIS));
                while(result.next()){
                    String name = result.getString("g_name");
                    double p = Double.parseDouble(result.getString("price"));
                    Blob img = result.getBlob("picture");
                    String mode = result.getString("mode");
                    String g_condition = result.getString("g_condition");
                    
                    JPanel goodsPanel = createGoodsPanel(img,p,name,mode,g_condition);
                    //buyerScrollPane.add(goodsPanel);
                    wrapper.add(goodsPanel);
                }
                
                query = String.format("SELECT * FROM `Goods` WHERE s_name = '%s' AND g_condition = '已賣出'",user);
                sucess = statement.execute(query);
                result = statement.getResultSet();
            
                if(sucess){
                    wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.Y_AXIS));
                    while(result.next()){
                        String name = result.getString("g_name");
                        double p = Double.parseDouble(result.getString("price"));
                        Blob img = result.getBlob("picture");
                        String mode = result.getString("mode");
                        String g_condition = result.getString("g_condition");
                    
                        JPanel goodsPanel = createGoodsPanel(img,p,name,mode,g_condition);
                        wrapper.add(goodsPanel);
                    }
                    sellingItemsPane.add(wrapper);
                    sellingItemsPane.setViewportView(wrapper);
                    sellingItemsPane.revalidate(); // 刷新ScrollPane
                    sellingItemsPane.repaint(); 
                }
            }
        }catch(SQLException e){
            e.printStackTrace();
        }     
    }
   

    
    /**
     * create buyerFrame as well as the ScrollPane in the Frame
     * create ScrollPane by calling this.createGoodPane()
     */
    private void createBuyerFrame(){
        try{
            Statement statement = conn.createStatement();
            String query = "SELECT g_name, price, picture, s_name FROM `Goods` WHERE g_condition = '未賣出'";
            boolean sucess = statement.execute(query);
            ResultSet result = statement.getResultSet();
            
            if(sucess){
                JPanel wrapper = new JPanel();
                wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.Y_AXIS));
                while(result.next()){
                    String name = result.getString("g_name");
                    double p = Double.parseDouble(result.getString("price"));
                    Blob img = result.getBlob("picture");
                    String seller = result.getString("s_name");
                    JPanel goodsPanel = createGoodsPanel(img,name,p,seller);
                    wrapper.add(goodsPanel);
                }
                buyerScrollPane.add(wrapper);
                buyerScrollPane.setViewportView(wrapper);
                buyerScrollPane.revalidate(); // 刷新ScrollPane
                buyerScrollPane.repaint(); // 重繪ScrollPane
            }
            allItem.setVisible(false);
        }catch(SQLException e){
            e.printStackTrace();
        }     
    }
    
    private void addPicture(JButton button) throws FileNotFoundException, IOException, SQLException{// 新增照片
        fileChooser.setMultiSelectionEnabled(true);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("圖片","png","jpg");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(button);
        if (returnVal == JFileChooser.APPROVE_OPTION){
            File[] arrfiles = fileChooser.getSelectedFiles();
            if (arrfiles == null || arrfiles.length == 0){
                return;
            }
        
            File ff = fileChooser.getSelectedFile();
            String fileName = ff.getName();
            String prefix = fileName.substring(fileName.lastIndexOf(".") + 1);
            if(!(prefix.equals("jpg") || prefix.equals("png"))){
                JOptionPane.showMessageDialog(null, "請選擇.jpg 或 .png格式的圖片", "照片格式錯誤", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            FileInputStream fis = new FileInputStream(ff);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            int len = -1;
            byte[] buf = new byte[1024];
            while((len = fis.read(buf)) != -1){
                baos.write(buf, 0, len);
            }
            baos.close();
            fis.close();
            byte[] bytes = baos.toByteArray();
            pic = conn.createBlob();
            pic.setBytes(1, bytes);
            
            String absolutePath = fileChooser.getSelectedFile().getAbsolutePath();
            ImageIcon imageIcon = new ImageIcon(absolutePath);
            imageIcon.setImage(imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));
            Image image = imageIcon.getImage();
            image = image.getScaledInstance(100, 100, Image.SCALE_DEFAULT);
            imageIcon.setImage(image);
            fileNameLabel.setText("");
            fileNameLabel.setIcon(imageIcon);
            fileNameLabel.getIcon();
            fileNameLabel.setPreferredSize(new Dimension(100,100));
        }
    }
    
    private static Connection conn;
    private String user = "";
    private String goodName = "";
    private String sell = "";
    private boolean newItem = false;
    private int price = 0;
    private Blob pic;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewItemButton;
    private javax.swing.JButton allItem;
    private javax.swing.JTextField bidPrice;
    private javax.swing.JToggleButton biddingBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buyBtn;
    private javax.swing.JFrame buyerFrame;
    private javax.swing.JScrollPane buyerScrollPane;
    private javax.swing.JComboBox<String> condition;
    private javax.swing.JLabel conditionL;
    private javax.swing.JLabel conditionLabel;
    private javax.swing.JLabel conditionTitle;
    private javax.swing.JButton confirm;
    private javax.swing.JButton deleteItemBtn;
    private javax.swing.JLabel discrLabel;
    private javax.swing.JTextArea discriptionArea;
    private javax.swing.JLabel discriptionL;
    private javax.swing.JLabel discriptionTitle;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JToggleButton fixedPBtn;
    private javax.swing.JFrame goodFrame;
    private javax.swing.JTextField idField;
    private javax.swing.JFrame infoFrame;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JLabel modeL;
    private javax.swing.JLabel modeTitle;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameL;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameTitle;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JComboBox<String> paymentBox;
    private javax.swing.JLabel paymentL;
    private javax.swing.JLabel paymentLabel;
    private javax.swing.JLabel paymentTitle;
    private javax.swing.JLabel picLabel;
    private javax.swing.JLabel pictureL;
    private javax.swing.JLabel pictureTitle;
    private javax.swing.JButton previousPage;
    private javax.swing.JButton previousPageButton;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceL;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel pricingLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> searchTag;
    private javax.swing.JFrame sellerFrame;
    private javax.swing.JScrollPane sellingItemsPane;
    private javax.swing.JButton signupButton;
    private javax.swing.JLabel tagL;
    private javax.swing.JComboBox<String> tagSeller;
    private javax.swing.JLabel tagsLabel;
    private javax.swing.JLabel tagsTitle;
    private javax.swing.JButton toBuyer;
    private javax.swing.JButton toSeller;
    private javax.swing.JButton uploadButton;
    private javax.swing.JLabel userIDLabel;
    // End of variables declaration//GEN-END:variables
}
